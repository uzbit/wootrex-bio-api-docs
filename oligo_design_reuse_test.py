import requests
import time
import base64
import mimetypes


def readFileAndEncode(filePath, name, type):
    designFileData = []
    try:
        with open(filePath, "rb") as file:
            fileData = file.read()
            encodedData = base64.b64encode(fileData).decode("ascii")
            designFileData.append([name, encodedData, type])
    except Exception as e:
        print(f"Error reading or encoding file: {e}")
    return designFileData


# Example usage:
filePath = "design01.xlsx"  # Replace with your file path
name = "design01.xlsx"
type, _ = mimetypes.guess_type(filePath)

designFileData = readFileAndEncode(filePath, name, type)

# Print the designFileData to verify
print(designFileData)

url = "https://homologypath.com/router/"
token = "YOUR_API_TOKEN_HERE"
data = {
    "api": "oligo_design",
    # "hostname": "localhost",
    "required_parameters": {
        "sequences": [
            {
                "sequence_name": "example1",
                "sequence": "TTTCATAACTATACTCGTAAGGATCATGTTATTGATTTCTTCAAAGGTTACTGTGGGTCTCCGGGCCCCCCCGTCCACCCAGACCGACCGAACTCTCCCGTTTAGGACCCTAGTAAGTCATCATTGGTATATGAATGCGACCCCGAAGAACTGTGGGTCTCCGGGCCCCCCCGTCCACCCAGACCGACCGAACTCTCCCGCAATTCTATAAGAATGCACACTGCATCGATACATAAAACGTCTCGATCGCGCCGGGAAAGGTACGCACGCGGTATATACCGCGTGCGTACCTTTCCCGGCTCCTTCCAGAGGTATGTGGCTGCGTGGTCAAAAGTGCGGCATTCGTATTTGCTCCTCGTGTTTACTCTCACAAACTTGACCTGGAGATCAAGGAGATGCTTCTTGTGGAACTGGACAACGCAACGACGACGACGACG",
                "primer_length": "20",
            },
            {
                "sequence_name": "example2",
                "sequence": "ATGCCGGACGGATCCGGATCTCGCGGGATTTTCATAACTATACTCGTAAGGATCATGTTATTGATTTCTTCAAAGGTTACTGTGGGTCCTCGCACCGGATCCGGATCGTCCGGATCGCGAAATGCCGGACGGATCCGGATCTCGCGGGATCTCGCACCGGATCCGGATCGTCCGGATCGCGAA",
                "primer_length": "20",
            },
        ],
        "oligo_design_parameters": {
            "design_type": "maximize_recycling",
            "minimum_length": "30",
            "target_length": "50",
            "maximum_length": "60",
            "minimum_overlap": "15",
            "maximum_overlap": "30",
        },
        "primer_design_parameters": {
            "target_primer_length": "20",
            "tm_optimize_primers": "true",
        },
    },
    "optional_parameters": {
        "design_name": "design01",
        "source_plate_size": "384",
        "destination_plate_size": "384",
        "emails": "your@email.com",
        "row_major": "true",
        "recycle_oligos": "true",
        "partition_identity": "0.95",
        "compute_complexity_for_design": "false",
        # "custom_cuts": {"example1": ["25"]},
        "temp": "60",
        "design_files": [
            [
                "design01.xlsx",
                "",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            ]
        ],
    },
}

# Post a request with job info to the API.
print("Posting request (worker starting may take some time)...")
response = requests.post(
    url,
    headers={"Authorization": f"Token {token}"},
    json=data,
)
print(response)
data = response.json()

# At this point "job_id" field means the worker is booted and computing.
print("Response:", data)

# Depending on how big the request was, you should periodically poll the API with "job_id".
# This example just sleeps for 10 seconds, which is enough time to finish the calculations.
time.sleep(10)

# Poll the API to get the job results.
print(f"Checking {data} for results...")
data["api"] = "oligo_design"
# data["hostname"] = "localhost"
response = requests.post(
    url,
    headers={"Authorization": f"Token {token}"},
    json=data,
)
response = response.json()

# A polling response with successful execution will have a "Finished" field with the "job_id".
if "Finished" in response:
    print(f"Finished {data} with:\n{response}")
elif "Queued" in response:
    print(f"Job queued to execute.")
elif "Failed" in response:
    print(f"Job failed with {response['Failed']}!")
elif "Processing" in response:
    print(f"Job is currently executing.")
elif "Error" in response:
    print(f"Job in an unknown state! {response['Error']}")

print("")
print("Reuse Efficiency", response["Design Info"]["Reuse efficiency"])
